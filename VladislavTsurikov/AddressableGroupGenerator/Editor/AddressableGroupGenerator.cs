#if UNITY_EDITOR
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditor.AddressableAssets;
using UnityEditor.AddressableAssets.Settings;
using UnityEditor.AddressableAssets.Settings.GroupSchemas;
using UnityEngine.Profiling;

namespace VladislavTsurikov.AddressableGroupGenerator.Editor
{
    public static class AddressableGroupGenerator
    {
        public static void CreateGroupsFromContent(string rootPath, int limit, int folderDepth, bool filterByExtension, string extensionFilter)
        {
            string[] targetFolders = Directory.GetDirectories(rootPath, "*", SearchOption.AllDirectories)
                .Where(folder =>
                    PathRulesUtility.GetFolderDepth(folder, rootPath) == folderDepth &&
                    ContentFolderUtility.IsValidContentFolder(folder))
                .ToArray();

            AddressableAssetSettings settings = AddressableAssetSettingsDefaultObject.GetSettings(false);

            AssetDatabase.StartAssetEditing();
            try
            {
                int total = targetFolders.Length;
                int processedCount = 0;

                for (int i = 0; i < total; i++)
                {
                    if (limit != -1 && i >= limit)
                    {
                        break;
                    }
                    
                    Profiler.BeginSample("Create Addressable Group");

                    string folder = targetFolders[i];
                    string rawGroupName = ContentFolderUtility.GetGroupName(folder);
                    string groupName = GroupNameConvention.ToAutoGroupName(rawGroupName);

                    AddressableAssetGroup group = settings.FindGroup(groupName) ??
                                                  settings.CreateGroup(groupName, false, false, false, null, typeof(BundledAssetGroupSchema));

                    AssetEntryUtility.AddAssetsToGroup(folder, group, groupName, filterByExtension, extensionFilter);

                    processedCount++;

                    EditorUtility.DisplayProgressBar("Creating Addressable Groups", folder, (float)processedCount / total);
                    
                    Profiler.EndSample();
                }
            }
            finally
            {
                AssetDatabase.StopAssetEditing();
                EditorUtility.ClearProgressBar();
                AssetDatabase.SaveAssets();
                UnityEngine.Debug.Log("Addressable Groups created.");
            }
        }

        public static void RemoveAutoGeneratedGroups(AddressableAssetSettings settings)
        {
            List<AddressableAssetGroup> toRemove = settings.groups
                .Where(g => g != null && GroupNameConvention.IsAutoGeneratedGroup(g.Name))
                .ToList();

            foreach (AddressableAssetGroup group in toRemove)
            {
                settings.RemoveGroup(group);
                UnityEngine.Debug.Log($"Removed auto-generated group: {group.Name}");
            }
        }
    }
}
#endif